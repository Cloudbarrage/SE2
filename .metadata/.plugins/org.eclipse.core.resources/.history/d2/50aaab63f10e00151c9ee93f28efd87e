import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

public class Beobachter implements Observer {
	private interface command {
		public void run(Object arg);
	}

	private int _beobachter;

	private int _n;
	private int _n1;
	private int _n2;

	private Map<Observable, command> _funktionen;

	public Beobachter() {

		_funktionen = new HashMap<Observable, command>();

	}

	public void registriereBeobachter(Beobachtbar beobachtbar) {
		beobachtbar.addObserver(this);
		++_beobachter;
		command com;
		if (_beobachter == 1) {
			com = new command() {
				public void run(Object arg) {
					count1();
				}
			};
		} else if (_beobachter == 2) {
			com = new command() {
				public void run(Object arg) {
					count2();
				}
			};
		} else {
			com = new command() {
				public void run(Object arg) {
					count();
				}
			};
		}

		_funktionen.put(beobachtbar, com);
	}

	@Override
	public void update(Observable o, Object arg) {
		_funktionen.get(o).run(arg);
	}

	private void count() {
		++_n;
	}

	private void count1() {
		++_n1;
	}

	private void count2() {
		++_n2;
	}

	public int getNumber() {
		return _n;
	}

	public int getNumber1() {
		return _n1;
	}

	public int getNumber2() {
		return _n2;
	}
}
