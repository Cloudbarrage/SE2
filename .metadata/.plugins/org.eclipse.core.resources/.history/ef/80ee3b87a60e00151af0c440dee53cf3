import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

public class Beobachter implements Observer {
	private interface command {
		public void run(Object arg);
	}

	private int _beobachter;

	private List<Integer> _counter;

	private Map<Observable, command> _funktionen;

	public Beobachter() {

		_funktionen = new HashMap<Observable, command>();
		_counter = new ArrayList<Integer>();

	}

	public void registriereBeobachter(Beobachtbar beobachtbar) {
		beobachtbar.addObserver(this);
		++_beobachter;
		_counter.add(_beobachter, 0);
		command com;
		if (_beobachter == 1) {
			com = new command() {
				public void run(Object arg) {
					count(1);
				}
			};
		} else if (_beobachter == 2) {
			com = new command() {
				public void run(Object arg) {
					count(2);
				}
			};
		} else {
			com = new command() {
				public void run(Object arg) {
					count(0);
				}
			};
		}

		_funktionen.put(beobachtbar, com);
	}

	@Override
	public void update(Observable o, Object arg) {
		_funktionen.get(o).run(arg);
	}

	private void count(int i) {
		_counter.set(i, _counter.get(i) + 1);
	}

	public int getNumber(int i) {
		return _counter.get(i);
	}
}
