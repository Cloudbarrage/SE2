package Modell;
import static org.junit.Assert.*;

import org.junit.Test;

public class ModellTest {
	@Test
	public void AufrufTestTyp1() {
		// Erzeuge mehrere Beobachter und Beobachtbare
		Beobachtbar beobachtbar1 = new Beobachtbar();
		Beobachtbar beobachtbar2 = new Beobachtbar();
		Beobachter beobachter1 = new Beobachter();
		Beobachter beobachter2 = new Beobachter();
		beobachter1.registriereBeobachter(beobachtbar1);
		beobachter1.registriereBeobachter(beobachtbar2);
		beobachter2.registriereBeobachter(beobachtbar1);
		beobachter2.registriereBeobachter(beobachtbar2);

		// Ändere beide beobachtbar je 100000000 mal
		System.out.println("__________");
		for (int j = 0; j != 10; ++j) {
			for (int i = 0; i != 1000000; ++i) {
				beobachtbar1.increment();
				beobachtbar2.increment();
			}
			System.out.print("#");
		}

		// Prüfe, ob alle Änderungen angekommen sind
		assertEquals(beobachtbar1.getNumber(), beobachter1.getNumber(1));
		assertEquals(beobachtbar1.getNumber(), beobachter2.getNumber(1));
		assertEquals(beobachtbar2.getNumber(), beobachter1.getNumber(2));
		assertEquals(beobachtbar2.getNumber(), beobachter2.getNumber(2));

	}

	@Test
	public void AufrufTestTyp2() {
		// Erzeuge mehrere Beobachter und Beobachtbare
		BeobachtbarZwei beobachtbar1 = new BeobachtbarZwei();
		BeobachtbarZwei beobachtbar2 = new BeobachtbarZwei();
		BeobachterZwei beobachter1 = new BeobachterZwei();
		BeobachterZwei beobachter2 = new BeobachterZwei();
		beobachter1.registriereBeobachter(beobachtbar1);
		beobachter1.registriereBeobachter(beobachtbar2);
		beobachter2.registriereBeobachter(beobachtbar1);
		beobachter2.registriereBeobachter(beobachtbar2);

		// Ändere beide beobachtbar je 10000000 mal
		System.out.print("\n");
		for (int j = 0; j != 10; ++j) {
			for (int i = 0; i != 1000000; ++i) {
				beobachtbar1.increment();
				beobachtbar2.increment();
			}
			System.out.print("#");
		}

		// Prüfe, ob alle Änderungen angekommen sind
		assertEquals(beobachtbar1.getNumber(),
				beobachter1.getNumber(beobachtbar1.getID()));
		assertEquals(beobachtbar1.getNumber(),
				beobachter2.getNumber(beobachtbar1.getID()));
		assertEquals(beobachtbar2.getNumber(),
				beobachter1.getNumber(beobachtbar2.getID()));
		assertEquals(beobachtbar2.getNumber(),
				beobachter2.getNumber(beobachtbar2.getID()));

	}

	@Test
	public void AufrufTestTyp3() {
		// Erzeuge mehrere Beobachter und Beobachtbare
		BeobachtbarDrei beobachtbar1 = new BeobachtbarDrei();
		BeobachtbarDrei beobachtbar2 = new BeobachtbarDrei();
		BeobachterDrei beobachter1 = new BeobachterDrei();
		BeobachterDrei beobachter2 = new BeobachterDrei();
		beobachter1.registriereBeobachter(beobachtbar1);
		beobachter1.registriereBeobachter(beobachtbar2);
		beobachter2.registriereBeobachter(beobachtbar1);
		beobachter2.registriereBeobachter(beobachtbar2);

		// Ändere beide beobachtbar je 10000000 mal
		System.out.print("\n");
		for (int j = 0; j != 10; ++j) {
			for (int i = 0; i != 1000000; ++i) {
				beobachtbar1.aufruf();
				beobachtbar2.aufruf();
			}
			System.out.print("#");
		}

		// Always true
		assertTrue(true);

	}

}
